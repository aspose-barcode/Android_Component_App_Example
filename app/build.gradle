apply plugin: 'com.android.application'
apply plugin: 'maven-publish'

project.description = 'Aspose Barcode Android Application'
def proguardFileName = "gradles/proguard.app.conf"
//def githubProperties = new Properties()
//githubProperties.load(new FileInputStream(rootProject.file("github.properties")))

def githubProperties = GradleAssist.readProperties("$rootDir/github.properties");

publishing {
    publications {
        bar(MavenPublication) {
            groupId gp.groupId
            artifactId gp.artifactFinalName
            version gp.versionName
            artifact(gp.publishPath + gp.apkFinalName)
        }
    }

    repositories {
        maven {
            name = "GitHubPackages"
            url = uri("https://maven.pkg.github.com/aspose-barcode/Barcode_Android_Application")

            credentials {
                username = githubProperties['github.user']
                password = githubProperties['github.key']
            }
        }
    }
}

android {
    namespace 'com.aspose.barcode.component.example'
    compileSdk 33

    defaultConfig {
        applicationId "com.aspose.barcode.component.example"
        minSdk 26
        targetSdk 33
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        basic {
//            signingConfig signingConfigs.release
            versionNameSuffix '.basic'
            minifyEnabled true
            proguardFiles "$proguardFileName"
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    buildFeatures {
        viewBinding true
    }
}

dependencies {
    implementation fileTree(dir: "$projectDir/libs", include: '*.aar')
    androidTestImplementation fileTree(dir: "$projectDir/libs", include: '*.aar')

    implementation 'androidx.appcompat:appcompat:1.6.1'
//    implementation 'com.google.android.material:material:1.9.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
    implementation 'androidx.preference:preference:1.2.0'
    implementation 'androidx.appcompat:appcompat:1.6.1'
    implementation 'com.google.android.material:material:1.8.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
    androidTestImplementation 'androidx.constraintlayout:constraintlayout:2.1.4'
    implementation 'androidx.navigation:navigation-fragment:2.5.3'
    implementation 'androidx.navigation:navigation-ui:2.5.3'
    implementation 'junit:junit:4.13.2'
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.5'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'
}

task copyApk(type: Copy) {
    from("$buildDir/outputs/apk/basic") {
        include("app-basic-unsigned.apk")
        rename("app-basic-unsigned.apk", "$apkFinalName")
    }
    destinationDir(file("$publishPath"))
    doFirst {
        logger.info('\n### Executing copyApk')
    }
    doLast {
        logger.info("copied  $apkFinalName  to  $publishPath")
    }
}

apply from: 'gradles/echoBuildParameters.gradle'

gradle.taskGraph.whenReady { taskGraph ->
    def tasks = taskGraph.getAllTasks();
    println("list of tasks:")
    int i = 0;
    tasks.each {
        def taskName = it.getName()
        println(i++ + " : $taskName")
//        if (setUpToDateToFalse.equals('true')) {
//            it.outputs.upToDateWhen { false }
//        }
    }
}

preBuild.dependsOn('echoBuildParameters')
copyApk.dependsOn 'check'
build.dependsOn 'copyApk'